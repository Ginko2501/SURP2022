#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jun 13 14:07:52 2022

@author: jemmaschroder
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.path as path
import matplotlib.lines as lines
import matplotlib.patches as patches
from matplotlib.collections import PatchCollection


# b is the value of P(1,b)
# mathplotlib is annoying and normalizing tick marks is annoying so photo is not to scale

b=np.sqrt(3)

#initating points of polygon
origin=np.array([0,0])
p1=np.array([b,0])
p2=np.array([b,1])
p3=np.array([0,1])

#puts all points in matrix
shape=np.array([origin,p1,p2,p3,origin])

#initiate eigendirections (can hardcode these bc constant for polydisks)
ed1=([-1,1]) #based at p1
ed2=([-1,-1]) #based at p2
ed3=([1,-1]) #based at p3

#put all points in matrix
eds=np.array([ed1,ed2,ed3])

#i stole this code from stack lol, but this checks whether points are counterclockwise
def ccw(A,B,C):
    return (C[1]-A[1]) * (B[0]-A[0]) > (B[1]-A[1]) * (C[0]-A[0])

# Return true if line segments AB and CD intersect
def intersect(A,B,C,D):
    return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)

# print(intersect(p1,p2,p2,p3))

#find intersection point
def find_intersection(shape,eds,vertex):
    for i in range(0,4):
        print('---')
        print(i)
        #check whether it intersects
        if intersect(shape[i],shape[i+1],eds[vertex],shape[vertex+1])==True:
            #compute intersection point
            if shape[i][0]==shape[i+1][0]:
                #compute actual intersection point
                point=np.array([shape[i][0],(eds[vertex][1]-shape[vertex+1][1])/(eds[vertex][0]-shape[vertex+1][0])*(shape[i][0]-eds[vertex][0])+eds[vertex][1]])
                
                if np.array_equal(point,shape[i]) or np.array_equal(point,shape[i+1]):
                    print('corner')
            else:
                point=np.array([(eds[vertex][0]-shape[vertex+1][0])/(eds[vertex][1]-shape[vertex+1][1])*(shape[i][1]-eds[vertex][1])+eds[vertex][0],shape[i][1]])
                
            
            
            print(f'The line from {shape[i]} to {shape[i+1]} and the line from {eds[vertex]} to {shape[vertex+1]} intersect at {point}')
        else:
            print(f'The line from {shape[i]} to {shape[i+1]} and the line from {eds[vertex]} to {shape[vertex+1]} do not intersect')
            
    return (point)

find_intersection(shape,eds,0)  
# print(find_intersection(shape,eds,0))



polygon = [origin,p1,p2,p3]
polygon.append(polygon[0]) #repeat the first point to create a 'closed loop'

xs, ys = zip(*polygon) #create lists of x and y values

plt.figure()
plt.plot(xs,ys) 

ev1 = [p1,ed1]
xe, ye = zip(*ev1) #create lists of x and y values

plt.plot(xe,ye)

plt.plot(find_intersection(shape,eds,0)[0],find_intersection(shape,eds,0)[1],color='green', marker='o')


plt.show() 
    
    
    

    



               
               
